{"version":3,"sources":["components/ContactForm/ContactForm.module.css","App.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/Filter/Filter.jsx","redux/contacts/contacts-operations.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Nothing.jsx","components/Loader.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","delContactRequest","delContactSuccess","delContactError","filterContacts","getContacts","state","contacts","items","getLoading","loading","getFilter","filter","getContactListFilter","createSelector","name","toLowerCase","includes","connect","value","selectors","dispatch","onChange","e","actions","target","className","style","wrapper","label","input","type","axios","defaults","baseURL","ContactList","this","props","fetchContacts","onDelBtnClick","map","contact","listItem","namber","number","btn","id","onClick","event","React","Component","console","log","delete","then","catch","error","operations","a","get","data","ContactForm","handelChange","currentTarget","setState","resetForm","handleSabmit","preventDefault","some","alert","onSubmit","css","title","form","autoComplete","length","obj","post","Nothing","message","Loader","loaderDiv","color","isLoading","createReducer","_","payload","Number","action","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da510ea7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ContactForm_title__3MqSl\",\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\",\"btn\":\"ContactForm_btn__2Bpnz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2Rh_f\",\"title\":\"App_title__-GfWs\",\"message\":\"App_message__2vrzR\",\"loaderDiv\":\"App_loaderDiv__5pqlZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Filter_wrapper__IqOjQ\",\"label\":\"Filter_label__3DcZT\",\"name\":\"Filter_name__pSTfl\",\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactList_listItem__29Cbr\",\"name\":\"ContactList_name__2WLgA\",\"namber\":\"ContactList_namber__xUfTY\",\"btn\":\"ContactList_btn__1Xk4q\"};","import { createAction } from \"@reduxjs/toolkit\";\n\n// Оновлення\nexport const fetchContactRequest = createAction(\"contacts/fetchContactRequest\");\nexport const fetchContactSuccess = createAction(\"contacts/fetchContactSuccess\");\nexport const fetchContactError = createAction(\"contacts/fetchContactError\");\n\n// Додавання\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\nexport const addContactError = createAction(\"contacts/addContactError\");\n\n// Видалення\nexport const delContactRequest = createAction(\"contacts/delContactRequest\");\nexport const delContactSuccess = createAction(\"contacts/delContactSuccess\");\nexport const delContactError = createAction(\"contacts/delContactError\");\n\nexport const filterContacts = createAction(\"Contact/filter\");\n\n// ====== До contacts-operetions\n// export const addContact = createAction(\"Contact/add\");\n// export const deleteContact = createAction(\"Contact/delete\");\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const getContacts = (state) => state.contacts.items;\n\nexport const getLoading = (state) => state.contacts.loading;\n\nexport const getFilter = (state) => state.contacts.filter;\n\n// ===== Мемоизация\nexport const getContactListFilter = createSelector(\n  [getFilter, getContacts],\n  (filter, items) => {\n    return items.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\n// ==== До\n// export const getContactListFilter = (state) => {\n//   const filter = getFilter(state);\n//   const items = getContacts(state);\n\n//   return items.filter(({ name }) =>\n//     name.toLowerCase().includes(filter.toLowerCase())\n//   );\n// };\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../redux/contacts/contacts-actions\";\nimport * as selectors from \"../../redux/contacts/contacts-selectors\";\nimport style from \"./Filter.module.css\";\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div className={style.wrapper}>\n      <label className={style.label}>\n        <span className={style.name}>Find contacts by name</span>\n        <input\n          className={style.input}\n          type=\"text\"\n          name=\"name\"\n          value={value}\n          onChange={onChange}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = PropTypes.shape({\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n}).isRequired;\n\nconst mapStateToProps = (state) => ({\n  value: selectors.getFilter(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (e) => dispatch(actions.filterContacts(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import axios from \"axios\";\nimport * as actions from \"./contacts-actions\";\n\naxios.defaults.baseURL = \"http://localhost:3000\";\n\n// Оновлення\nexport const fetchContacts = () => async (dispatch) => {\n  dispatch(actions.fetchContactRequest());\n  try {\n    const { data } = await axios.get(\"/contacts\");\n    dispatch(actions.fetchContactSuccess(data));\n  } catch (error) {\n    dispatch(actions.fetchContactError(error));\n  }\n};\n\n// Додавання\nexport const addContact = ({ name, number }) => (dispatch) => {\n  const contacts = { name, number };\n\n  dispatch(actions.addContactRequest());\n\n  axios\n    .post(\"/contacts\", contacts)\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\n    .catch((error) => dispatch(actions.addContactError(error)));\n};\n\n// Видалення\nexport const deleteContact = (id) => (dispatch) => {\n  console.log(\"deleteContact>>\", id);\n  dispatch(actions.delContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(actions.delContactSuccess(id)))\n    .catch((error) => dispatch(actions.delContactError(error)));\n};\n\n// ===============\n// export const fetchContacts = () => (dispatch) => {\n//   dispatch(actions.fetchContactRequest());\n\n//   axios\n//     .get(\"/contacts\")\n//     .then(({ data }) => dispatch(actions.fetchContactSuccess(data)))\n//     .catch((error) => dispatch(actions.fetchContactError(error)));\n// };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as operations from \"../../redux/contacts/contacts-operations\";\nimport * as selectors from \"../../redux/contacts/contacts-selectors\";\nimport style from \"./ContactList.module.css\";\n\nclass ContactList extends React.Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    const { contacts, onDelBtnClick } = this.props;\n    return (\n      <ul>\n        {contacts.map((contact) => (\n          <li key={contact.id} className={style.listItem}>\n            <span className={style.name}>{contact.name}:</span>\n            <span className={style.namber}>{contact.number}</span>\n            <button\n              className={style.btn}\n              type=\"button\"\n              id={contact.id}\n              onClick={(event) => onDelBtnClick(event.target.id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nContactList.propTypes = PropTypes.shape({\n  contacts: PropTypes.arrayOf(PropTypes.object.isRequired),\n  onDelBtnClick: PropTypes.func.isRequired,\n}).isRequired;\n\nconst mapStateToProps = (state) => ({\n  contacts: selectors.getContactListFilter(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDelBtnClick: (id) => dispatch(operations.deleteContact(id)),\n  fetchContacts: () => dispatch(operations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as operations from \"../../redux/contacts/contacts-operations\";\nimport * as selectors from \"../../redux/contacts/contacts-selectors\";\nimport PropTypes from \"prop-types\";\nimport css from \"./ContactForm.module.css\";\n\nclass ContactForm extends Component {\n  static propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handelChange = (e) => {\n    const { name, value } = e.currentTarget;\n\n    this.setState({ [name]: value });\n  };\n\n  resetForm = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  handleSabmit = (e) => {\n    e.preventDefault();\n    const { name, number } = this.state;\n    const { contacts } = this.props;\n\n    if (contacts.some((contact) => contact.name === name)) {\n      return alert(`Name \"${name}\" already exists, please enter another name.`);\n    } else this.props.onSubmit({ name, number });\n\n    this.resetForm();\n  };\n\n  render() {\n    const { contacts } = this.props;\n    return (\n      <>\n        <div>\n          <h1 className={css.title}>Phonebook</h1>\n          <form\n            className={css.form}\n            autoComplete=\"off\"\n            onSubmit={this.handleSabmit}\n          >\n            <label className={css.label}>\n              Name:\n              <input\n                type=\"text\"\n                name=\"name\"\n                value={this.state.name}\n                onChange={this.handelChange}\n                className={css.input}\n              />\n            </label>\n            <label className={css.label}>\n              Number:\n              <input\n                type=\"tel\"\n                name=\"number\"\n                value={this.state.number}\n                onChange={this.handelChange}\n                className={css.input}\n              />\n            </label>\n            <button type=\"submit\" className={css.btn}>\n              Add contact\n            </button>\n          </form>\n          <h2 className={css.title}>Contacts ({contacts.length})</h2>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: selectors.getContacts(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: (obj) => dispatch(operations.addContact(obj)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport css from '../App.module.css';\n\nconst Nothing = () => {\n  return (\n    <div>\n      <h2 className={css.message}>\n        Nothing, please start creating your contact\n      </h2>\n    </div>\n  );\n};\n\nexport default Nothing;\n","import React from \"react\";\nimport PropagateLoader from \"react-spinners/PropagateLoader\";\nimport css from \"../App.module.css\";\n\nconst Loader = () => {\n  return (\n    <div className={css.loaderDiv}>\n      <PropagateLoader loading={true} color={\"red\"} />\n    </div>\n  );\n};\n\nexport default Loader;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Nothing from \"./components/Nothing\";\nimport Loader from \"./components/Loader.jsx\";\nimport * as selectors from \"./redux/contacts/contacts-selectors\";\nimport css from \"./App.module.css\";\n\nconst App = ({ contacts, isLoading }) => {\n  return (\n    <div className={css.wrapper}>\n      <ContactForm />\n\n      {contacts.length === 0 && <Nothing />}\n\n      {contacts.length > 1 && <Filter />}\n\n      {isLoading && <Loader />}\n\n      {<ContactList />}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: selectors.getContacts(state),\n  isLoading: selectors.getLoading(state),\n});\n\nexport default connect(mapStateToProps)(App);\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport * as actions from \"./contacts-actions\";\n\nconst items = createReducer([], {\n  [actions.fetchContactSuccess]: (_, { payload }) => payload,\n  [actions.addContactSuccess]: (state, { payload }) => [...state, payload],\n  [actions.delContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== Number(payload)),\n});\n\nconst filter = createReducer(\"\", {\n  [actions.filterContacts]: (_, action) => action.payload,\n});\n\nconst loading = createReducer(false, {\n  [actions.fetchContactRequest]: () => true,\n  [actions.fetchContactSuccess]: () => false,\n  [actions.fetchContactError]: () => false,\n  [actions.addContactRequest]: () => true,\n  [actions.addContactSuccess]: () => false,\n  [actions.addContactError]: () => false,\n  [actions.delContactRequest]: () => true,\n  [actions.delContactSuccess]: () => false,\n  [actions.delContactError]: () => false,\n});\n\nconst error = createReducer(null, {});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport contactsReducer from \"./contacts/contacts-reducer\";\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\n\n// ===== Прослойки\n// const myMiddleware = (store) => (next) => (action) => {\n//   console.info(\"Послойка\", action);\n\n//   return next(action);\n// };\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  // myMiddleware,\n  logger,\n];\n\nexport const store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./base.css\";\nimport { Provider } from \"react-redux\";\n// import { PersistGate } from 'redux-persist/integration/react';\nimport * as store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}